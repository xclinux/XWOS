diff --git a/src/flash/nor/kinetis.c b/src/flash/nor/kinetis.c
index 084e009ee..0a5b2255b 100644
--- a/src/flash/nor/kinetis.c
+++ b/src/flash/nor/kinetis.c
@@ -177,8 +177,8 @@
 #define KINETIS_K_SDID_K10_M72	 0x00000080
 #define KINETIS_K_SDID_K10_M100	 0x00000100
 #define KINETIS_K_SDID_K10_M120	 0x00000180
-#define KINETIS_K_SDID_K11		 0x00000220
-#define KINETIS_K_SDID_K12		 0x00000200
+#define KINETIS_K_SDID_K11       0x00000220
+#define KINETIS_K_SDID_K12       0x00000200
 #define KINETIS_K_SDID_K20_M50	 0x00000010
 #define KINETIS_K_SDID_K20_M72	 0x00000090
 #define KINETIS_K_SDID_K20_M100	 0x00000110
@@ -193,17 +193,19 @@
 #define KINETIS_K_SDID_K40_M100  0x00000130
 #define KINETIS_K_SDID_K50_M72   0x000000E0
 #define KINETIS_K_SDID_K51_M72	 0x000000F0
-#define KINETIS_K_SDID_K53		 0x00000170
+#define KINETIS_K_SDID_K53       0x00000170
 #define KINETIS_K_SDID_K60_M100  0x00000140
 #define KINETIS_K_SDID_K60_M150  0x000001C0
 #define KINETIS_K_SDID_K70_M150  0x000001D0
 
 #define KINETIS_SDID_SERIESID_MASK 0x00F00000
-#define KINETIS_SDID_SERIESID_K   0x00000000
+#define KINETIS_SDID_SERIESID_K    0x00000000
 #define KINETIS_SDID_SERIESID_KL   0x00100000
 #define KINETIS_SDID_SERIESID_KE   0x00200000
 #define KINETIS_SDID_SERIESID_KW   0x00500000
-#define KINETIS_SDID_SERIESID_KV   0x00600000
+#define KINETIS_SDID_SERIESID_KV   0x00600000 /* S32K146 */
+#define KINETIS_SDID_SERIESID_S32K144   0x00400000
+#define KINETIS_SDID_SERIESID_S32K148   0x00800000
 
 #define KINETIS_SDID_SUBFAMID_SHIFT 24
 #define KINETIS_SDID_SUBFAMID_MASK  0x0F000000
@@ -216,6 +218,7 @@
 #define KINETIS_SDID_SUBFAMID_KX6   0x06000000
 #define KINETIS_SDID_SUBFAMID_KX7   0x07000000
 #define KINETIS_SDID_SUBFAMID_KX8   0x08000000
+#define KINETIS_SDID_SUBFAMID_S32K14    0x04000000
 
 #define KINETIS_SDID_FAMILYID_SHIFT 28
 #define KINETIS_SDID_FAMILYID_MASK  0xF0000000
@@ -229,6 +232,7 @@
 #define KINETIS_SDID_FAMILYID_K7X   0x70000000
 #define KINETIS_SDID_FAMILYID_K8X   0x80000000
 #define KINETIS_SDID_FAMILYID_KL8X  0x90000000
+#define KINETIS_SDID_FAMILYID_S32K  0x10000000
 
 /* The field originally named DIEID has new name/meaning on KE1x */
 #define KINETIS_SDID_PROJECTID_MASK  KINETIS_SDID_DIEID_MASK
@@ -2334,6 +2338,19 @@ static int kinetis_probe_chip(struct kinetis_chip *k_chip)
 				strcpy(name, "MKV10Z%s7");
 				break;
 
+                        case KINETIS_SDID_FAMILYID_K1X | KINETIS_SDID_SUBFAMID_KX4:
+				k_chip->watchdog_type = KINETIS_WDOG32_KE1X;
+				k_chip->pflash_sector_size = 4<<10;
+				k_chip->nvm_sector_size = 2<<10;
+				k_chip->max_flash_prog_size = 1<<10;
+				num_blocks = 2;
+				k_chip->flash_support = FS_PROGRAM_PHRASE | FS_PROGRAM_SECTOR;
+				k_chip->cache_type = KINETIS_CACHE_MSCM;
+
+				cpu_mhz = 80;
+				snprintf(name, sizeof(name), "S32K146");
+				break;
+
 			case KINETIS_SDID_FAMILYID_K1X | KINETIS_SDID_SUBFAMID_KX1:
 				/* KV11: FTFA, 2kB sectors */
 				k_chip->pflash_sector_size = 2<<10;
@@ -2421,12 +2438,64 @@ static int kinetis_probe_chip(struct kinetis_chip *k_chip)
 				snprintf(name, sizeof(name), "MKE%u%uF%%s%u",
 					 familyid, subfamid, cpu_mhz / 10);
 				break;
+                        case KINETIS_SDID_FAMILYID_K1X | KINETIS_SDID_SUBFAMID_KX8: /* Old S32K144 */
+				/* KE1xF: FTFE, 4kB sectors */
+				k_chip->pflash_sector_size = 4<<10;
+				k_chip->nvm_sector_size = 2<<10;
+				k_chip->max_flash_prog_size = 1<<10;
+				num_blocks = 2;
+				k_chip->flash_support = FS_PROGRAM_PHRASE | FS_PROGRAM_SECTOR;
+				k_chip->cache_type = KINETIS_CACHE_MSCM;
+
+				cpu_mhz = 80;
+				snprintf(name, sizeof(name), "S32K144HFVLL");
+				break;
 
 			default:
 				LOG_ERROR("Unsupported KE FAMILYID SUBFAMID");
 			}
 			break;
 
+                case KINETIS_SDID_SERIESID_S32K144:
+                        k_chip->watchdog_type = KINETIS_WDOG32_KE1X;
+                        switch (k_chip->sim_sdid & (KINETIS_SDID_FAMILYID_MASK | KINETIS_SDID_SUBFAMID_MASK)) {
+                        case (KINETIS_SDID_FAMILYID_K1X | KINETIS_SDID_SUBFAMID_KX4):
+				k_chip->pflash_sector_size = 4<<10;
+				k_chip->nvm_sector_size = 2<<10;
+				k_chip->max_flash_prog_size = 1<<10;
+				num_blocks = 2;
+				k_chip->flash_support = FS_PROGRAM_PHRASE | FS_PROGRAM_SECTOR;
+				k_chip->cache_type = KINETIS_CACHE_MSCM;
+
+				cpu_mhz = 80;
+				snprintf(name, sizeof(name), "S32K144");
+                                break;
+                        default:
+				LOG_ERROR("Unsupported S32K144 FAMILYID SUBFAMID");
+                                break;
+                        }
+                        break;
+
+                case KINETIS_SDID_SERIESID_S32K148:
+                        k_chip->watchdog_type = KINETIS_WDOG32_KE1X;
+                        switch (k_chip->sim_sdid & (KINETIS_SDID_FAMILYID_MASK | KINETIS_SDID_SUBFAMID_MASK)) {
+                        case (KINETIS_SDID_FAMILYID_K1X | KINETIS_SDID_SUBFAMID_KX4):
+				k_chip->pflash_sector_size = 4<<10;
+				k_chip->nvm_sector_size = 2<<10;
+				k_chip->max_flash_prog_size = 1<<10;
+				num_blocks = 2;
+				k_chip->flash_support = FS_PROGRAM_PHRASE | FS_PROGRAM_SECTOR;
+				k_chip->cache_type = KINETIS_CACHE_MSCM;
+
+				cpu_mhz = 80;
+				snprintf(name, sizeof(name), "S32K148");
+                                break;
+                        default:
+				LOG_ERROR("Unsupported S32K148 FAMILYID SUBFAMID");
+                                break;
+                        }
+                        break;
+
 		default:
 			LOG_ERROR("Unsupported K-series");
 		}
